stages:
  - test
  - build
  - deploy

variables:
  NODE_ENV: production
  PNPM_HOME: "$CI_PROJECT_DIR/.pnpm-store"
  PATH: "$PNPM_HOME:$PATH"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

before_script:
  - node_version=$(cat .nvmrc)
  - curl -fsSL https://get.pnpm.io/install.sh | bash -
  - corepack enable
  - corepack prepare pnpm@10.0.0 --activate
  - pnpm env use $node_version
  - pnpm install

lint_and_test:
  stage: test
  image: node:20
  script:
    - pnpm lint
    - pnpm format
    - pnpm test:unit
    - pnpm test:e2e
    - pnpm build
  artifacts:
    paths:
      - dist/
    expire_in: 1h

docker_build_staging:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - export IMAGE_NAME="$CI_REGISTRY/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}-staging"
    - export TAG=latest
    - echo "$PRIVATE_REGISTRY_PASSWORD" | docker login -u "$PRIVATE_REGISTRY_USERNAME" --password-stdin $PRIVATE_REGISTRY_URL
    - docker build --build-arg NODE_VERSION=$(cat .nvmrc) -t $IMAGE_NAME:$TAG .
    - docker push $IMAGE_NAME:$TAG

docker_build_production:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  rules:
    - if: "$CI_COMMIT_TAG =~ /^v.*/"
  script:
    - export IMAGE_NAME="$CI_REGISTRY/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}"
    - export TAG="${CI_COMMIT_TAG}"
    - echo "$PRIVATE_REGISTRY_PASSWORD" | docker login -u "$PRIVATE_REGISTRY_USERNAME" --password-stdin $PRIVATE_REGISTRY_URL
    - docker build --build-arg NODE_VERSION=$(cat .nvmrc) -t $IMAGE_NAME:$TAG .
    - docker push $IMAGE_NAME:$TAG
